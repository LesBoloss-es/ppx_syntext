(rule
 (alias runtest)
 (action
  (progn
   (diff for_all.expected for_from_scratch.expected)
   (diff for_all.expected for_monad.expected)
   (diff for_all.expected for_simple.expected)

   (diff if_all.expected if_from_scratch.expected)
   (diff if_all.expected if_monad.expected)
   (diff if_all.expected if_simple.expected)

   (diff let_all.expected let_from_scratch.expected)
   (diff let_all.expected let_monad.expected)
   (diff let_all.expected let_simple.expected)

   (diff match_all.expected match_from_scratch.expected)
   (diff match_all.expected match_monad.expected)
   (diff match_all.expected match_simple.expected)

   (diff match_exn_all.expected match_exn_from_scratch.expected)
   (diff match_exn_all.expected match_exn_monad.expected)
   (diff match_exn_all.expected match_exn_simple.expected)

   (diff match_guard_all.expected match_guard_from_scratch.expected)
   (diff match_guard_all.expected match_guard_monad.expected)
   (diff match_guard_all.expected match_guard_simple.expected)

   (diff seq_all.expected seq_from_scratch.expected)
   (diff seq_all.expected seq_monad.expected)
   (diff seq_all.expected seq_simple.expected)

   (diff try_all.expected try_from_scratch.expected)
   (diff try_all.expected try_monad.expected)
   (diff try_all.expected try_simple.expected)

   (diff while_all.expected while_from_scratch.expected)
   (diff while_all.expected while_monad.expected)
   (diff while_all.expected while_simple.expected)
)))

;; ======================== [ ppx_nop_all ] ======================== ;;

(rule (action (copy if.ml if_all.ml)))
(executable (name if_all) (modules if_all) (preprocess (pps ppx_nop_all)))
(rule (with-stdout-to if_all.expected (run ./if_all.exe)))

(rule (action (copy let.ml let_all.ml)))
(executable (name let_all) (modules let_all) (preprocess (pps ppx_nop_all)))
(rule (with-stdout-to let_all.expected (run ./let_all.exe)))

(rule (action (copy seq.ml seq_all.ml)))
(executable (name seq_all) (modules seq_all) (preprocess (pps ppx_nop_all)))
(rule (with-stdout-to seq_all.expected (run ./seq_all.exe)))

(rule (action (copy match.ml match_all.ml)))
(executable (name match_all) (modules match_all) (preprocess (pps ppx_nop_all)))
(rule (with-stdout-to match_all.expected (run ./match_all.exe)))

(rule (action (copy match_exn.ml match_exn_all.ml)))
(executable (name match_exn_all) (modules match_exn_all) (preprocess (pps ppx_nop_all)))
(rule (with-stdout-to match_exn_all.expected (run ./match_exn_all.exe)))

(rule (action (copy match_guard.ml match_guard_all.ml)))
(executable (name match_guard_all) (modules match_guard_all) (preprocess (pps ppx_nop_all)))
(rule (with-stdout-to match_guard_all.expected (run ./match_guard_all.exe)))

(rule (action (copy try.ml try_all.ml)))
(executable (name try_all) (modules try_all) (preprocess (pps ppx_nop_all)))
(rule (with-stdout-to try_all.expected (run ./try_all.exe)))

(rule (action (copy assert.ml assert_all.ml)))
(executable (name assert_all) (modules assert_all) (preprocess (pps ppx_nop_all)))
(rule (with-stdout-to assert_all.expected (run ./assert_all.exe)))

(rule (action (copy for.ml for_all.ml)))
(executable (name for_all) (modules for_all) (preprocess (pps ppx_nop_all)))
(rule (with-stdout-to for_all.expected (run ./for_all.exe)))

(rule (action (copy while.ml while_all.ml)))
(executable (name while_all) (modules while_all) (preprocess (pps ppx_nop_all)))
(rule (with-stdout-to while_all.expected (run ./while_all.exe)))

;; ======================== [ ppx_nop_from_scratch ] ======================== ;;

(rule (action (copy if.ml if_from_scratch.ml)))
(executable (name if_from_scratch) (modules if_from_scratch) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to if_from_scratch.expected (run ./if_from_scratch.exe)))

(rule (action (copy let.ml let_from_scratch.ml)))
(executable (name let_from_scratch) (modules let_from_scratch) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to let_from_scratch.expected (run ./let_from_scratch.exe)))

(rule (action (copy seq.ml seq_from_scratch.ml)))
(executable (name seq_from_scratch) (modules seq_from_scratch) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to seq_from_scratch.expected (run ./seq_from_scratch.exe)))

(rule (action (copy match.ml match_from_scratch.ml)))
(executable (name match_from_scratch) (modules match_from_scratch) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_from_scratch.expected (run ./match_from_scratch.exe)))

(rule (action (copy match_exn.ml match_exn_from_scratch.ml)))
(executable (name match_exn_from_scratch) (modules match_exn_from_scratch) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_exn_from_scratch.expected (run ./match_exn_from_scratch.exe)))

(rule (action (copy match_guard.ml match_guard_from_scratch.ml)))
(executable (name match_guard_from_scratch) (modules match_guard_from_scratch) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_guard_from_scratch.expected (run ./match_guard_from_scratch.exe)))

(rule (action (copy try.ml try_from_scratch.ml)))
(executable (name try_from_scratch) (modules try_from_scratch) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to try_from_scratch.expected (run ./try_from_scratch.exe)))

(rule (action (copy assert.ml assert_from_scratch.ml)))
(executable (name assert_from_scratch) (modules assert_from_scratch) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to assert_from_scratch.expected (run ./assert_from_scratch.exe)))

(rule (action (copy for.ml for_from_scratch.ml)))
(executable (name for_from_scratch) (modules for_from_scratch) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to for_from_scratch.expected (run ./for_from_scratch.exe)))

(rule (action (copy while.ml while_from_scratch.ml)))
(executable (name while_from_scratch) (modules while_from_scratch) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to while_from_scratch.expected (run ./while_from_scratch.exe)))

;; ======================== [ ppx_nop_monad ] ======================== ;;

(rule (action (copy if.ml if_monad.ml)))
(executable (name if_monad) (modules if_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to if_monad.expected (run ./if_monad.exe)))

(rule (action (copy let.ml let_monad.ml)))
(executable (name let_monad) (modules let_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to let_monad.expected (run ./let_monad.exe)))

(rule (action (copy seq.ml seq_monad.ml)))
(executable (name seq_monad) (modules seq_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to seq_monad.expected (run ./seq_monad.exe)))

(rule (action (copy match.ml match_monad.ml)))
(executable (name match_monad) (modules match_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_monad.expected (run ./match_monad.exe)))

(rule (action (copy match_exn.ml match_exn_monad.ml)))
(executable (name match_exn_monad) (modules match_exn_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_exn_monad.expected (run ./match_exn_monad.exe)))

(rule (action (copy match_guard.ml match_guard_monad.ml)))
(executable (name match_guard_monad) (modules match_guard_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_guard_monad.expected (run ./match_guard_monad.exe)))

(rule (action (copy try.ml try_monad.ml)))
(executable (name try_monad) (modules try_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to try_monad.expected (run ./try_monad.exe)))

(rule (action (copy assert.ml assert_monad.ml)))
(executable (name assert_monad) (modules assert_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to assert_monad.expected (run ./assert_monad.exe)))

(rule (action (copy for.ml for_monad.ml)))
(executable (name for_monad) (modules for_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to for_monad.expected (run ./for_monad.exe)))

(rule (action (copy while.ml while_monad.ml)))
(executable (name while_monad) (modules while_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to while_monad.expected (run ./while_monad.exe)))

;; ======================== [ ppx_nop_simple ] ======================== ;;

(rule (action (copy if.ml if_simple.ml)))
(executable (name if_simple) (modules if_simple) (preprocess (pps ppx_nop_simple)))
(rule (with-stdout-to if_simple.expected (run ./if_simple.exe)))

(rule (action (copy let.ml let_simple.ml)))
(executable (name let_simple) (modules let_simple) (preprocess (pps ppx_nop_simple)))
(rule (with-stdout-to let_simple.expected (run ./let_simple.exe)))

(rule (action (copy seq.ml seq_simple.ml)))
(executable (name seq_simple) (modules seq_simple) (preprocess (pps ppx_nop_simple)))
(rule (with-stdout-to seq_simple.expected (run ./seq_simple.exe)))

(rule (action (copy match.ml match_simple.ml)))
(executable (name match_simple) (modules match_simple) (preprocess (pps ppx_nop_simple)))
(rule (with-stdout-to match_simple.expected (run ./match_simple.exe)))

(rule (action (copy match_exn.ml match_exn_simple.ml)))
(executable (name match_exn_simple) (modules match_exn_simple) (preprocess (pps ppx_nop_simple)))
(rule (with-stdout-to match_exn_simple.expected (run ./match_exn_simple.exe)))

(rule (action (copy match_guard.ml match_guard_simple.ml)))
(executable (name match_guard_simple) (modules match_guard_simple) (preprocess (pps ppx_nop_simple)))
(rule (with-stdout-to match_guard_simple.expected (run ./match_guard_simple.exe)))

(rule (action (copy try.ml try_simple.ml)))
(executable (name try_simple) (modules try_simple) (preprocess (pps ppx_nop_simple)))
(rule (with-stdout-to try_simple.expected (run ./try_simple.exe)))

(rule (action (copy assert.ml assert_simple.ml)))
(executable (name assert_simple) (modules assert_simple) (preprocess (pps ppx_nop_simple)))
(rule (with-stdout-to assert_simple.expected (run ./assert_simple.exe)))

(rule (action (copy for.ml for_simple.ml)))
(executable (name for_simple) (modules for_simple) (preprocess (pps ppx_nop_simple)))
(rule (with-stdout-to for_simple.expected (run ./for_simple.exe)))

(rule (action (copy while.ml while_simple.ml)))
(executable (name while_simple) (modules while_simple) (preprocess (pps ppx_nop_simple)))
(rule (with-stdout-to while_simple.expected (run ./while_simple.exe)))
